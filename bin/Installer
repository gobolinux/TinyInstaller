#!/bin/sh

#
# GoboLinux TinyInstaller for the Gobo-Embedded project
# Written by Lucas C. Villa Real <lucasvr@gobolinux.org>
#

source GoboPath

option_file=$goboTemp/option
mount_point=/Mount/GoboLinux

[ ! "$LANG" ] && LANG=en_US
lang_dir=$goboShared/TinyInstaller/Language/$LANG
source $lang_dir/DialogTitles
source $lang_dir/DialogLabels
source $lang_dir/DialogNetwork

alias dialog='dialog --backtitle "$lang_title_installer_backtitle" --cancel-label "$lang_label_cancel" --no-label "$lang_label_no" --yes-label "$lang_label_yes"'


#
# Start screen
#
text=`cat $lang_dir/Start`
dialog --title "$lang_title_installer" --msgbox "$text" 13 55


#
# Sanity checks
#
has_disks=0
has_partitions=0
for i in `cat /proc/partitions | awk {'print $4'}`
do
    case "$i" in
        loop*|name)
            continue
            ;;
        hda|hdb|hdc|hdd)
            has_disks=1
            continue
            ;;
        *)
            [ "$i" = "" ] && continue
            ;;
    esac
    has_partitions=1
done

if [ $has_disks = 0 ]
then
    text=`cat $lang_dir/NoDiskFound`
    dialog --title "$lang_title_installer" --msgbox "$text" 7 51
    exit 1
fi

if [ $has_partitions = 0 ]
then
    #
    # Create a new partition
    #
    disks=`fdisk -l 2> /dev/null | grep Disk | awk {'print $2" "$3'}`
    num_disks=`fdisk -l 2> /dev/null | grep Disk | wc -l | awk {'print $1'}`
    for num in `seq 1 $num_disks`
    do
        disk_name=`echo $disks | head -n $num | tail -n 1 | awk {'print $1'} | sed 's/://g'`
        disk_size=`echo $disks | head -n $num | tail -n 1 | awk {'print $2'}`
        dialog_menu="$dialog_menu $disk_name ${disk_size}Mb"
    done
    
    text=`cat $lang_dir/CreatePartition`
    hbox_size=$(( num_disks + 9 ))
    dialog --title "$lang_title_disk" --menu "$text" $hbox_size 55 $num_disks \
           $dialog_menu 2> $option_file || exit 1
    
    selected_disk=`cat $option_file`
    fdisk_cmd=`echo -e "n\np\n1\n\n\na\n1\nw\nq\n" | fdisk $selected_disk`
    if [ $? = 1 ]
    then
        echo "$fdisk_cmd"
        exit 1
    fi
    
    text=`cat $lang_dir/PartitionCreated`
    dialog --title "$lang_title_installer" --msgbox "$text" 8 51 || exit 1
    reboot
else    
    #
    # Select an already existing partition
    #
    partitions=`fdisk -l 2>&1 | grep "/dev/" | grep -v bytes`
    num_partitions=`echo "$partitions" | wc -l | awk {'print $1'}`
    for num in `seq 1 $num_partitions`
    do
        # partition name
        part_name=`echo "$partitions" | head -n $num | tail -n 1 | awk {'print $1'}`

        # get size
        second_field=`echo "$partitions" | head -n $num | tail -n 1 | awk {'print $2'}`
    
        if [ "$second_field" = "*" ]
        then num_blocks=`echo "$partitions" | head -n $num | tail -n 1 | awk {'print $5'} | sed 's/+//g'`
        else num_blocks=`echo "$partitions" | head -n $num | tail -n 1 | awk {'print $4'} | sed 's/+//g'`
        fi
    
        part_size=$(( num_blocks * 1024 / 1000000 ))

        # generate the last parameter to dialog's --menu option
        dialog_menu="$dialog_menu $part_name $part_size"
    done

    text=`cat $lang_dir/PartitionSelection`
    hbox_size=$(( num_partitions + 9 ))
    dialog --title "$lang_title_partition" --menu "$text" $hbox_size 55 $num_partitions \
           $dialog_menu 2> $option_file || exit 1
fi



#
# Partition warning screen
#
selected_partition=`cat $option_file`
text=`cat $lang_dir/PartitionWarning`
dialog --title "$lang_title_warning" --yesno "$text $selected_partition" 13 53 || exit 1


#
# Format the selected partition
#

# Ugly hack to workaround weird unionfs' behaviour against tmpfs and procfs
mount -o bind /     /Mount/UnionFS
mount -t unionfs -o dirs=/tmp=rw:/Mount/UnionFS=ro none /Mount/UnionFS
mount -o bind /proc /Mount/UnionFS/proc
mount -o bind /dev  /Mount/UnionFS/dev

mkfs_cmd=`chroot /Mount/UnionFS /bin/mkfs.ext3 -b 1024 -j -J size=1 "$selected_partition"`
if [ $? = 1 ]
then
    echo "$mkfs_cmd"
    umount /Mount/UnionFS/proc /Mount/UnionFS/dev /Mount/UnionFS /Mount/UnionFS
    exit 1
fi
umount /Mount/UnionFS/proc /Mount/UnionFS/dev /Mount/UnionFS /Mount/UnionFS


#
# Network settings
#
text=`cat $lang_dir/Network`
dialog --title "$lang_title_networking" --radiolist "$text" 13 65 2 \
    "DHCP"   "$lang_net_dhcp_entry" "on" \
    "Manual" "$lang_net_manual_entry" "" \
    2> $option_file || exit 1
selected_network_mode=`cat $option_file`

if [ $selected_network_mode = "Manual" ]
then
    dialog --title "$lang_title_networking" --form "$lang_title_manual" 10 40 4 \
        " $lang_net_manual_ip"      1 1       "10.0.0.100"    1 18 16 15 \
        " $lang_net_manual_mask"    2 1       "255.255.254.0" 2 18 16 15 \
        " $lang_net_manual_gateway" 3 1       "10.0.0.1"      3 18 16 15 \
        " $lang_net_manual_dns"     4 1       "10.0.0.1"      4 18 16 15 \
        2> $option_file || exit 1
    selected_network_options=`cat $option_file`
fi


#
# Confirmation screen
#
text=`cat $lang_dir/Confirmation`
dialog --title "$lang_title_confirmation" --yesno "$text" 9 53 || exit 1


#
# Copy symlinks and directories, except for /dev, /proc and /sys contents
#
mount "$selected_partition" $mount_point || exit 1
for i in /*; do [ -h $i ] && cp -a $i $mount_point; done
for i in /Depot /Programs /Users /usr; do cp -a $i $mount_point; done


#
# Generate the tree for /System/Kernel
#
mkdir -p $mount_point/System/Kernel
cp -a /System/Kernel/Boot $mount_point/System/Kernel
cp -a /System/Kernel/Modules $mount_point/System/Kernel

mkdir -p $mount_point/System/Kernel/Status
mkdir -p $mount_point/System/Kernel/Objects
mkdir -p $mount_point/System/Kernel/Devices

mknod -m 0600 $mount_point/System/Kernel/Devices/console c 5 1
mknod -m 0666 $mount_point/System/Kernel/Devices/null    c 1 3


#
# Copy entries from /System/Links, /System/Settings and /System/Variable
#
for i in Links Settings Variable; do cp -a /System/$i $mount_point/System; done


#
# Remove programs not listed in the Profile list
#
old_dir=`pwd`
cd $mount_point/Programs
for i in *
do
    # Remove the program if it's not listed in the Profile
    ! grep -q "^${i}$" /System/Links/Shared/TinyInstaller/Profile && rm -Rf $i && continue

    # Overwrite Settings by Defaults/Settings
    [ ! -d $i/Current/Resources/Defaults/Settings ] && continue
    rm -Rf $i/Settings/*
    cp -a $i/Current/Resources/Defaults/Settings/* $i/Settings/
    chroot $mount_point SymlinkProgram $i 2> /dev/null > /dev/null
done
cd $old_dir

chroot $mount_point find /System/Links /System/Settings | RemoveBroken > /dev/null


#
# Replace network settings
#
file=$mount_point/Programs/TinyScripts/Settings/NetworkSettings

if [ "$selected_network_mode" = "DHCP" ]
then
    cat $file | sed 's/eth0_IP=.*/eth0_IP=/g' \
              | sed 's/eth0_Netmask=.*/eth0_Netmask=/g' \
              | sed 's/Gateway=.*/Gateway=/g' > $goboTemp/NetworkSettings
else
    selected_ipaddr=`echo $selected_network_options | awk {'print $1'}`
    selected_netmask=`echo $selected_network_options | awk {'print $2'}`
    selected_gateway=`echo $selected_network_options | awk {'print $3'}`
    selected_dns=`echo $selected_network_options | awk {'print $4'}`
    
    cat $file | sed "s/eth0_IP=.*/eth0_IP=$selected_ipaddr/g" \
              | sed "s/eth0_Netmask=.*/eth0_Netmask=$selected_netmask/g" \
              | sed "s/Gateway=.*/Gateway=$selected_gateway/g" > $goboTemp/NetworkSettings

    echo "nameserver $selected_dns" > $mount_point/System/Settings/resolv.conf
fi

mv $goboTemp/NetworkSettings $file


#
# Adjust references to /dev/hda1 and grub's "(hd0,0)"
#
cat $mount_point/System/Settings/fstab | sed 's/^#//g' > $goboTemp/fstab
cat $goboTemp/fstab | sed "s,/dev/hda1,$selected_partition,g" > $mount_point/System/Settings/fstab

partition=`echo $selected_partition | cut -d"/" -f3`
grub_partition=`dev2grub.sh $partition`

disk=`echo $partition | sed 's/[0-9]//g'`
grub_disk=`dev2grub.sh $disk`

file=$mount_point/System/Kernel/Boot/grub/menu.lst
cat $file | sed "s,/dev/hda1,$selected_partition,g" > $goboTemp/menu.lst
cat $goboTemp/menu.lst | sed "s/(hd0,0)/$grub_partition/g" > $file


#
# Install bootloader
#
mount -o bind /proc $mount_point/proc
mount -o bind /dev  $mount_point/dev
grub_cmd=`echo -e "root $grub_partition\nsetup --prefix=/System/Kernel/Boot/grub $grub_disk\nquit" | chroot $mount_point /bin/grub`
ret=$?
umount $mount_point/dev $mount_point/proc $mount_point

if [ $ret != 0 ]
then
    echo "$grub_cmd"
    exit 1
fi


#
# C'est tout!
#
text=`cat $lang_dir/Finished`
dialog --title "$lang_title_confirmation" --msgbox "$text" 7 53 || exit 1
reboot
